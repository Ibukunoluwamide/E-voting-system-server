// Define validation functions outside the request handler
const isValidEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const gmailRegex = /@gmail\.com$/;
  return emailRegex.test(email) && gmailRegex.test(email);
};

const isValidPhoneNumber = (phoneNumber) => {
  const phoneRegex = /^[0-9]{11}$/;
  return phoneRegex.test(phoneNumber);
};

const isValidPassword = (password) => {
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  return passwordRegex.test(password);
};

const isValidGovernmentIdNumber = (id) => {
  // Example validation, replace with actual logic if needed
  return id && id.length > 5; // Replace with actual validation rule
};

const calculateAge = (dateOfBirth) => {
  const today = new Date();
  const birthDate = new Date(dateOfBirth);
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();

  if (
    monthDiff < 0 ||
    (monthDiff === 0 && today.getDate() < birthDate.getDate())
  ) {
    age--;
  }
  return age;
};

const isEligible = (dateOfBirth, minimumAge) => {
  const age = calculateAge(dateOfBirth);
  return age >= minimumAge;
};

const registerUser = asyncHandler(async (req, res) => {
  const {
    fullname,
    dateOfBirth,
    address,
    governmentIdNumber,
    email,
    phoneNumber,
    username,
    password,
  } = req.body;

  // Validate input fields
  if (
    !fullname ||
    !dateOfBirth ||
    !address ||
    !governmentIdNumber ||
    !email ||
    !phoneNumber ||
    !username ||
    !password
  ) {
    res.status(400);
    throw new Error("All fields are required");
  }

  if (!isValidEmail(email)) {
    res.status(400);
    throw new Error("Invalid email format");
  }

  if (!isValidPhoneNumber(phoneNumber)) {
    res.status(400);
    throw new Error("Invalid phone number format");
  }

  if (!isValidPassword(password)) {
    res.status(400);
    throw new Error(
      "Password must be at least 8 characters long and include an uppercase letter, a lowercase letter, and a number"
    );
  }

  if (!isValidGovernmentIdNumber(governmentIdNumber)) {
    res.status(400);
    throw new Error("Invalid government ID number");
  }

  const minimumAge = 18; // Define minimum age requirement
  if (!isEligible(dateOfBirth, minimumAge)) {
    res.status(400);
    throw new Error("User Not Eligible to Register");
  }

  const userExists = await User.findOne({
    $or: [
      { email: email },
      { governmentIdNumber: governmentIdNumber },
      { phoneNumber: phoneNumber },
      { username: username },
    ],
  });

  if (userExists) {
    res.status(400);
    throw new Error("User already exists");
  }

  const user = new User({
    fullname,
    dateOfBirth,
    address,
    governmentIdNumber,
    email,
    phoneNumber,
    username,
    password,
  });
  await user.save();

  if (user) {
    generateToken(res, user._id);
    res.status(201).json({ message: "User Registered Successfully", user });
  } else {
    res.status(400);
    throw new Error("Invalid user data");
  }
});

const userExists = await User.findOne({
  $or: [
    { email: email },
    { governmentIdNumber: governmentIdNumber },
    { phoneNumber: phoneNumber },
    { username: username },
  ],
});
